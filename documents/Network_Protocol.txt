Es wird vorausgesetzt, dass ein Server bereits auf der jeweiligen IP offen ist. Der Client muss sich auf dem selben Port versuchen zu verbinden wie der Server gehosted ist.
Sobald eine Verbindung enstanden ist wird ein Connect packet gesendet welches dem Server signalisiert, dass der jeweilige Client sich verbinden wollen würde.
Die Packet strutkur aller Packets hat die folgende Eigenschaft:
"BEGIN_CHAR"Packet-Name"SPACER"Information1"SPACER"Information2"SPACER"..."END_CHAR"
Das "BEGIN_CHAR" ist ein besonderer ASCII Zeichen, nämlich ASCII Zeichen "2", welcher ausgeschrieben "Start of text" heißt.
Dieser signalisiert dem Server, dass die darauf folgenden Bytes als Nachricht zu interpretieren sind.
Der "SPACER" ist ebenso ein besonderes ASCII Zeichen, nämlich ASCII Zeichen "31", welcher ausgeschrieben "Unit Seperator" heißt.
Dieser signalisiert dem Server, dass eine Information abgeschlossen wurde und die nächste interpretiert werden soll.
Dies wird dazu genutzt mehrere Parameter sinnvoll getrennt zu haben und nicht eine festgelegte Länge an Bytes für die einzelnen Packets zu haben.
Und der "END_CHAR" ist ASCII Zeichen "3" welcher ausgeschrieben "End of text" heißt.
Dieser signalisiert dem Server, dass die Übermittlung des Packets abgeschlossen wurde und die letze Information vollendet ist.

Ein Beispiel dazu wäre, wo "BEGIN_CHAR", "SPACER" und "END_CHAR" für diese besondere Zeichen stehen:
"BEGIN_CHAR"Move"SPACER"Robot_ID:X_Coordinate:Y_Coordinate:OptionalInventoryAdjust"END_CHAR" - der Parameter "OptionalInventoryAdjust" ist wie der Name vermuten lässt optional und wird genutzt sofern sich das Inventar eines Roboters ändern soll.
"BEGIN_CHAR"Chat"SPACER"(Irgendeine Nachricht)"END_CHAR" - Sendet die Nachricht "(Irgendeine Nachricht)" an den Server sofern die Designation richtig mittels dem Outputstream gesetzt ist.

Um ein neues Packet zu definieren muss lediglich in dem Ordner "game/packet/packets" eine neue Datei erstellt werden welche von dem Datentypen "AbstractPacket" extended.
Daraufhin müssen die einzelnen abstrakten Funktionen implementiert werden und der Super des Konstruktors muss angepasst werden.
Es gibt drei Parameter für den Konstruktor:
- String	help
- String[]	parts
- String	response

"help" ist ein bis zu dem jetzigen Stand ungenutzter Parameter welcher später noch hinzugefügt wird. Dieser soll für Funktionalität des Packets aushilfe geben.
"parts" ist ein String array welches aus Regex-Patterns besteht. Diese geben an wie das Packet validiert werden muss.
Diese müssen jede einzelne Einzelinformation beinhalten. Ebenso sollten die einzelnen Regex-Pattern Strings mit einem "^" anfangen und einem "$" aufhören da dies bedeutet, dass der String exakt dem Format entsprechen muss. Dies ist deshalb notwendig für den Fall, dass wenn einzelne Informationen ansich zu viel Inhalt haben, wo allerdings der Anfang des Inhalts ansich stimmen würde, diese nicht falsch interpretiert werden und fehler verursachen.
"response" ist ein bis zu dem jetzigen Stand ungenutzter Parameter welcher später noch benutzt wird um den ganzen Packet-Log verständlich zu machen damit gesehen wird welcher Client welches Packet richtig empfangen hat.

Die encode funktion muss lediglichdie besondere Packetstruktur besitzten und sofern das Regex-Pattern dann stimmt sollte dies funktionieren.

Die decode funktion bekommt zwei Parameter übergeben. Der eine ist das Object selber welches die jeweilige Decode funktion aufgerufen hat. Dies wird dafür genutzt, dass eine bidirektionalität von Packets möglich ist, da dort dann angegeben werden kann welche Teile der einezlenen Parent-Klassen verändert werden sollen.
Der andere Parameter ist lediglich ein String welcher den Inhalt des erhaltenden Packets darstellt. Dieser wird dafür genutzt, dass die Inhalte richtig an das Parent-Objekt übermittelt und verarbeitet werden.

Die folgenden Packets, mit der korrekten Encodierung, sind bisher definiert (aus Lesbarkeitsgründen werden die Begin und End Zeichen komplett ausgelassen und müssen sich am Anfang und Ende beigedacht werden. Ebenso werden die "SPACER" mit einfachen " " abgekürzt.):

Awake awake
Broadcast EINE_NACHRICHT
Chat EINE_NACHRICHT
ChatLobby NAME_DER_LOBBY EINE_NACHRICHT
Close close
Connect NAME_DES_SPIELERS
CreateLobby NAME_DER_LOBBY
HighScore high
InitNickname NAME_DES_SPIELERS
JoinLobby NAME_DER_LOBBY NAME_DES_SPIELERS
LeaveLobby NAME_DER_LOBBY NAME_DES_SPIELERS
Move (ID_DES_ROBOTERS:ROBOTER_AKTION:X_COORDINATE:Y_COORDINATE(:OPTIONALES_INVENTAR)) wiederholt
Nickname ALTER_NAME_DES_SPIELERS NEUER_NAME_DES_SPIELERS
Score NAME_DES_SPIELERS NEUER_SCORE
StartGame NAME_DER_LOBBY
Success success
Timeout NAME_DES_SERVERS timeout
Update (X_COORDINATE, Y_COORDINATE:OBJEKT_AUF_ZELLE:ID_DES_OBJEKTES:NAME_DES_BESITZER:(:OPTIONALES_INVENTAR:ID_DES_OPTIONALEN_INVENTARS)) wiederholt
UpdateTurn NAME_DES_SPIELERS_WELCHER_AM_ZUG_IST NUMMER_DES_ZUGES
Whisper NAME_DES_SPIELERS EINE_NACHRICHT
Winner NAME_DER_LOBBY NAME_DES_SIEGERS PUNKTESTAND_DES_SIEGERS

EINE_NACHRICHT                          steht für einen String.
NAME_DER_LOBBY                          steht für einen String.
NAME_DES_SPIELERS                       steht für einen String.
ID_DES_ROBOTERS                         steht für die Ganzzahl welche in der ArrayList aus Robotern des einzelnen Client der jeweilige Roboter vorzufinden ist. Anders gesagt steht diese ID für den Index des Roboters in der ArrayList.
ROBOTER_AKTION                          steht für die jeweilige RoboterAktion welche der Roboter ausüben will, diese kann die Namen der Werte des Enums "RoboterAction" annehmen. Dies wäre "Move", "Dig", "Wait", "RequestRadar", "RequestTrap"
X_COORDINATE                            steht für die jeweilige Ganzzahl zu welcher sich der Roboter bewegen will.
Y_COORDINATE                            steht für die jeweilige Ganzzahl zu welcher sich der Roboter bewegen will.
OPTIONALES_INVENTAR                     steht für einen String welcher dem Format "" entspricht damit dieser String innerhalb der Decoding funktion neu interpretiert werden kann.
ALTER_NAME_DES_SPIELERS                 steht für einen String.
NEUER_NAME_DES_SPIELERS                 steht für einen String.
OBJEKT_AUF_ZELLE                        steht für das Objekt welches sich auf der jeweiligen Zelle befindet in dem Format "".
ID_DES_OBJEKTES                         steht für die Ganzzahl welche mit diesem Objekt referiert werden soll. Für den Fall des Erzes ist dieses die Ordinität des Enums des Typen.
NAME_DES_BESITZERS                      steht für einen String welcher den Namen des Spielers darstellt welcher dieses Objekt platzierte. Der Server hat einen besonderen Namen welcher anders von jedem Spielernamen ist.
ID_DES_OPTIONALEN_INVENTARS             steht für die Ganzzahl welche mit dem Optionalen Inventar objekt assoziert werden soll.
NAME_DES_SPIELERS_WELCHER_AM_ZUG_IST    steht für des Spielers Namen welcher gerade am Zug ist.
NUMMER_DES_ZUGES                        steht für die Ganzzahl welche beschreibt welche Zugnummer gerade dran ist.
NAME_DES_SIEGERS                        steht für den Namen des Spielers welcher die Runde gewonnen hat.
PUNKTESTAND_DES_SIEGERS                 steht für den Punktestand welcher dieser Spieler erreicht hat.


Awake wird dafür genutzt um zu überprüfen ob der Client noch verbunden ist.
Broadcast wird dafür genutzt um eine Nachricht über alle Lobbies zu senden.
Chat wird dafür genutzt um in dem derzeiten Raum eine Nachricht zu senden.
Close wird dafür genutzt um eine Verbindung zu trennen.
Connect wird dafür genutzt um den Spieler mit dem Server zu verbinden.
CreateLobby wird dafür genutzt um eine Lobby auf dem jeweiligen Server anzulegen.
LeaveLobby wird dafür genutzt um die Lobby zu verlassen.
Move wird dafür genutzt um die Roboter zu bewegen.
Nickname wird dafür genutzt um den Namen des Spielers zu aktualisieren.
Score wird dafür genutzt um den Score eines Spielers zu aktualisieren.
Success wird dafür genutzt um eine erfolgreich initialisierte Verbindung zu signalisieren.
Timeout wird dafür genutzt anzuzeigen, dass eine Verbindung getrennt wird.
Update wird dafür genutzt das Spielfeld an alle Spieler zu senden.
Whisper wird dafür genutzt um eine Nachricht an einen spezifischen Spieler zu senden.


Um ein neues Packet zu senden muss eine neue Instanz des "PacketHandlers" erstellt werden und auf diesem muss die Funktion "pushMessage" aufgerufen werden. Diese erwartet zwei Parameter, der erste ist der OutputStream an welchen das jeweilige Packet gesendet werden soll und der zweite Parameter ist die eigentliche Nachricht selber in String form.
